# ============================================================
# R2R Kubernetes Secrets Configuration Template
# ============================================================
# Copy this file to secrets.yaml and replace placeholders with actual values
# NEVER commit secrets.yaml to version control

---
# Main R2R application secrets
apiVersion: v1
kind: Secret
metadata:
  name: r2r-secrets
  namespace: r2r-system
  labels:
    app: r2r
    component: application
type: Opaque
stringData:
  # R2R Core Configuration
  R2R_SECRET_KEY: "your-secret-key-here"  # Generate with: openssl rand -base64 32
  
  # Database Credentials
  R2R_POSTGRES_USER: "r2r_user"
  R2R_POSTGRES_PASSWORD: "your-secure-postgres-password"
  R2R_POSTGRES_DBNAME: "r2r_db"
  
  # LLM API Keys
  OPENAI_API_KEY: "sk-your-openai-api-key"
  ANTHROPIC_API_KEY: "sk-ant-your-anthropic-api-key"
  AZURE_API_KEY: "your-azure-cognitive-services-key"
  GOOGLE_API_KEY: "your-google-ai-api-key"
  GEMINI_API_KEY: "your-gemini-api-key"
  GROQ_API_KEY: "your-groq-api-key"
  COHERE_API_KEY: "your-cohere-api-key"
  ANYSCALE_API_KEY: "your-anyscale-api-key"
  HUGGINGFACE_API_KEY: "your-huggingface-api-key"
  LM_STUDIO_API_KEY: "your-lm-studio-api-key"
  
  # Cloud Provider Credentials
  AWS_ACCESS_KEY_ID: "your-aws-access-key"
  AWS_SECRET_ACCESS_KEY: "your-aws-secret-key"
  AZURE_FOUNDRY_API_KEY: "your-azure-foundry-key"
  GOOGLE_APPLICATION_CREDENTIALS: |
    {
      "type": "service_account",
      "project_id": "your-project",
      "private_key_id": "your-key-id",
      "private_key": "-----BEGIN PRIVATE KEY-----\nyour-private-key\n-----END PRIVATE KEY-----\n",
      "client_email": "your-service-account@your-project.iam.gserviceaccount.com",
      "client_id": "your-client-id",
      "auth_uri": "https://accounts.google.com/o/oauth2/auth",
      "token_uri": "https://oauth2.googleapis.com/token"
    }
  
  # OAuth Credentials
  GOOGLE_CLIENT_ID: "your-google-oauth-client-id"
  GOOGLE_CLIENT_SECRET: "your-google-oauth-client-secret"
  GITHUB_CLIENT_ID: "your-github-oauth-client-id"
  GITHUB_CLIENT_SECRET: "your-github-oauth-client-secret"
  
  # External Service API Keys
  UNSTRUCTURED_API_KEY: "your-unstructured-api-key"
  FIRECRAWL_API_KEY: "your-firecrawl-api-key"
  SERPER_API_KEY: "your-serper-api-key"
  SENDGRID_API_KEY: "your-sendgrid-api-key"
  
  # Monitoring and Error Tracking
  R2R_SENTRY_DSN: "your-sentry-dsn"

---
# Hatchet workflow engine secrets
apiVersion: v1
kind: Secret
metadata:
  name: hatchet-secrets
  namespace: r2r-system
  labels:
    app: hatchet
    component: workflow-engine
type: Opaque
stringData:
  # Hatchet Database Configuration
  HATCHET_POSTGRES_USER: "hatchet_user"
  HATCHET_POSTGRES_PASSWORD: "your-secure-hatchet-postgres-password"
  HATCHET_POSTGRES_DBNAME: "hatchet"
  
  # Hatchet RabbitMQ Configuration
  HATCHET_RABBITMQ_USER: "hatchet"
  HATCHET_RABBITMQ_PASSWORD: "your-secure-rabbitmq-password"
  
  # Hatchet Admin Credentials
  HATCHET_ADMIN_PASSWORD: "your-secure-admin-password"

---
# Database-specific secrets
apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secrets
  namespace: r2r-system
  labels:
    app: postgresql
    component: database
type: Opaque
stringData:
  # PostgreSQL Configuration
  postgres-password: "your-secure-postgres-password"
  postgres-postgres-password: "your-secure-postgres-admin-password"
  replication-password: "your-secure-replication-password"

---
# SSL/TLS Certificate secrets (if not using cert-manager)
apiVersion: v1
kind: Secret
metadata:
  name: r2r-tls-manual
  namespace: r2r-system
  labels:
    app: r2r
    component: tls
type: kubernetes.io/tls
data:
  # Base64 encoded certificate and key
  # To encode: cat your-cert.crt | base64 -w 0
  tls.crt: LS0tLS1CRUdJTi... # Your base64 encoded certificate
  tls.key: LS0tLS1CRUdJTi... # Your base64 encoded private key

---
# Monitoring secrets
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: monitoring
  labels:
    app: monitoring
    component: alerting
type: Opaque
stringData:
  # Grafana Admin Password
  admin-password: "your-secure-grafana-password"
  
  # Slack Webhook for Alerts
  slack-webhook-url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
  
  # PagerDuty Integration Key
  pagerduty-service-key: "your-pagerduty-service-key"
  
  # Email SMTP Configuration
  smtp-password: "your-smtp-password"

---
# Azure Key Vault Secret Provider Class (if using Azure Key Vault)
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: r2r-azure-keyvault
  namespace: r2r-system
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"
    userAssignedIdentityID: ""  # Managed identity client ID from Terraform output
    keyvaultName: "your-keyvault-name"  # From Terraform output
    cloudName: ""
    objects: |
      array:
        - |
          objectName: openai-api-key
          objectType: secret
          objectVersion: ""
        - |
          objectName: anthropic-api-key
          objectType: secret
          objectVersion: ""
        - |
          objectName: postgres-password
          objectType: secret
          objectVersion: ""
        - |
          objectName: r2r-secret-key
          objectType: secret
          objectVersion: ""
  secretObjects:
  - secretName: r2r-secrets-from-keyvault
    type: Opaque
    data:
    - objectName: openai-api-key
      key: OPENAI_API_KEY
    - objectName: anthropic-api-key
      key: ANTHROPIC_API_KEY
    - objectName: postgres-password
      key: R2R_POSTGRES_PASSWORD
    - objectName: r2r-secret-key
      key: R2R_SECRET_KEY

---
# Image Pull Secrets (if using private container registry)
apiVersion: v1
kind: Secret
metadata:
  name: acr-credentials
  namespace: r2r-system
  labels:
    app: r2r
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eW91ci1kb2NrZXItY29uZmlnLWpzb24tYmFzZTY0LWVuY29kZWQ=
  # To generate this:
  # kubectl create secret docker-registry acr-credentials \
  #   --docker-server=your-acr-name.azurecr.io \
  #   --docker-username=your-acr-username \
  #   --docker-password=your-acr-password \
  #   --dry-run=client -o yaml | grep '.dockerconfigjson:' | cut -d' ' -f4

# ============================================================
# IMPORTANT NOTES:
# ============================================================

# 1. Security Best Practices:
#    - Never commit secrets.yaml to version control
#    - Use strong, randomly generated passwords
#    - Rotate secrets regularly
#    - Consider using Azure Key Vault for production

# 2. Generate secure passwords:
#    openssl rand -base64 32

# 3. Base64 encoding for binary data:
#    cat file.crt | base64 -w 0

# 4. Environment-specific values:
#    - Development: Use test API keys and simple passwords
#    - Staging: Use staging API keys and moderate security
#    - Production: Use production API keys and maximum security

# 5. Secrets management alternatives:
#    - Azure Key Vault (recommended for production)
#    - External Secrets Operator
#    - Sealed Secrets
#    - HashiCorp Vault

# ============================================================
# VALIDATION COMMANDS:
# ============================================================

# Check if secrets are created correctly:
# kubectl get secrets -n r2r-system
# kubectl describe secret r2r-secrets -n r2r-system

# Test secret values (be careful with output):
# kubectl get secret r2r-secrets -n r2r-system -o jsonpath='{.data.OPENAI_API_KEY}' | base64 -d

# Verify Azure Key Vault integration:
# kubectl get secretproviderclass -n r2r-system
# kubectl describe secretproviderclass r2r-azure-keyvault -n r2r-system