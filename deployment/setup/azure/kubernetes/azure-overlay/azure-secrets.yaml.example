# Azure-specific Secrets Template
# Copy this file to azure-secrets.yaml and fill in actual values
# NEVER commit azure-secrets.yaml to version control

---
apiVersion: v1
kind: Secret
metadata:
  name: azure-secrets
  namespace: ai-system
  labels:
    app: r2r
    component: secrets
    provider: azure
type: Opaque
stringData:
  # Azure Storage Account credentials
  AZURE_STORAGE_KEY: "your-azure-storage-account-key"
  AZURE_STORAGE_CONNECTION_STRING: "DefaultEndpointsProtocol=https;AccountName=your-account;AccountKey=your-key;EndpointSuffix=core.windows.net"
  
  # Azure Key Vault access (if not using managed identity)
  AZURE_CLIENT_ID: "your-azure-client-id"
  AZURE_CLIENT_SECRET: "your-azure-client-secret"
  AZURE_TENANT_ID: "your-azure-tenant-id"
  
  # Azure Container Registry credentials (if using private ACR)
  ACR_USERNAME: "your-acr-username"
  ACR_PASSWORD: "your-acr-password"
  ACR_LOGIN_SERVER: "your-acr.azurecr.io"
  
  # Azure OpenAI credentials (if using Azure OpenAI instead of OpenAI)
  AZURE_OPENAI_API_KEY: "your-azure-openai-api-key"
  AZURE_OPENAI_ENDPOINT: "https://your-openai-resource.openai.azure.com/"
  
  # Azure Cognitive Services API key
  AZURE_COGNITIVE_SERVICES_KEY: "your-cognitive-services-key"
  
  # Azure Application Insights instrumentation key
  AZURE_APPLICATION_INSIGHTS_INSTRUMENTATION_KEY: "your-app-insights-key"
  AZURE_APPLICATION_INSIGHTS_CONNECTION_STRING: "InstrumentationKey=your-key;IngestionEndpoint=https://eastus-8.in.applicationinsights.azure.com/"
  
  # Azure Service Bus connection string (if using)
  AZURE_SERVICE_BUS_CONNECTION_STRING: "Endpoint=sb://your-namespace.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=your-key"
  
  # Azure Redis Cache credentials (if using managed Redis)
  AZURE_REDIS_KEY: "your-redis-access-key"
  AZURE_REDIS_CONNECTION_STRING: "your-redis-host:6380,password=your-redis-key,ssl=True,abortConnect=False"
  
  # Azure PostgreSQL credentials (if using managed PostgreSQL)
  AZURE_POSTGRESQL_PASSWORD: "your-postgresql-password"
  AZURE_POSTGRESQL_CONNECTION_STRING: "postgresql://username:password@server.postgres.database.azure.com:5432/database?sslmode=require"
  
  # Azure Backup credentials
  AZURE_BACKUP_STORAGE_KEY: "your-backup-storage-key"
  
  # Azure Monitor shared access signature (if needed)
  AZURE_MONITOR_SAS_TOKEN: "your-monitor-sas-token"

---
# Azure Key Vault Secret Provider Class
# Use this to integrate with Azure Key Vault for secret management
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-keyvault-secrets
  namespace: ai-system
spec:
  provider: azure
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "true"
    userAssignedIdentityID: ""  # Fill from Terraform output: aks_identity_principal_id
    keyvaultName: ""            # Fill from Terraform output: key_vault_name
    cloudName: ""               # Leave empty for Azure Public Cloud
    objects: |
      array:
        - |
          objectName: openai-api-key
          objectType: secret
          objectVersion: ""
        - |
          objectName: anthropic-api-key
          objectType: secret
          objectVersion: ""
        - |
          objectName: postgres-password
          objectType: secret
          objectVersion: ""
        - |
          objectName: r2r-secret-key
          objectType: secret
          objectVersion: ""
        - |
          objectName: azure-storage-key
          objectType: secret
          objectVersion: ""
        - |
          objectName: azure-openai-api-key
          objectType: secret
          objectVersion: ""
  # Sync secrets to Kubernetes secrets
  secretObjects:
  - secretName: azure-keyvault-secrets
    type: Opaque
    data:
    - objectName: openai-api-key
      key: OPENAI_API_KEY
    - objectName: anthropic-api-key
      key: ANTHROPIC_API_KEY
    - objectName: postgres-password
      key: R2R_POSTGRES_PASSWORD
    - objectName: r2r-secret-key
      key: R2R_SECRET_KEY
    - objectName: azure-storage-key
      key: AZURE_STORAGE_KEY
    - objectName: azure-openai-api-key
      key: AZURE_OPENAI_API_KEY

---
# Docker registry secret for Azure Container Registry
apiVersion: v1
kind: Secret
metadata:
  name: acr-secret
  namespace: ai-system
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eW91ci1kb2NrZXItY29uZmlnLWpzb24tYmFzZTY0LWVuY29kZWQ=
  # Generate this value with:
  # kubectl create secret docker-registry acr-secret \
  #   --docker-server=your-acr.azurecr.io \
  #   --docker-username=your-acr-username \
  #   --docker-password=your-acr-password \
  #   --dry-run=client -o yaml | grep '.dockerconfigjson:' | awk '{print $2}'

# ====================================================================================
# INSTRUCTIONS FOR FILLING VALUES:
# ====================================================================================

# 1. Azure Storage Account:
#    - Get from Terraform output: terraform output -raw storage_account_primary_access_key
#    - Connection string format: DefaultEndpointsProtocol=https;AccountName=ACCOUNT;AccountKey=KEY;EndpointSuffix=core.windows.net

# 2. Azure Key Vault:
#    - Get vault name from Terraform: terraform output -raw key_vault_name
#    - Get managed identity ID from Terraform: terraform output -raw aks_identity_principal_id

# 3. Azure Container Registry:
#    - Get login server from Terraform: terraform output -raw acr_login_server
#    - Enable admin user in ACR and get credentials

# 4. Azure OpenAI (if using):
#    - Create Azure OpenAI resource in Azure portal
#    - Get API key and endpoint from the resource

# 5. Azure Application Insights:
#    - Create Application Insights resource
#    - Get instrumentation key and connection string

# 6. Generate secrets:
#    openssl rand -base64 32  # For any random keys needed

# 7. Base64 encode binary data:
#    echo -n "your-value" | base64

# ====================================================================================
# AZURE KEY VAULT SETUP (RECOMMENDED FOR PRODUCTION):
# ====================================================================================

# 1. Store secrets in Azure Key Vault:
# az keyvault secret set --vault-name "your-keyvault" --name "openai-api-key" --value "sk-..."
# az keyvault secret set --vault-name "your-keyvault" --name "postgres-password" --value "..."

# 2. Grant AKS managed identity access to Key Vault:
# az keyvault set-policy --name "your-keyvault" \
#   --object-id "$(terraform output -raw aks_identity_principal_id)" \
#   --secret-permissions get list

# 3. Enable Key Vault secrets provider (done via Terraform):
# The AKS cluster is configured with Azure Key Vault Secrets Provider

# 4. Use SecretProviderClass above instead of direct secrets

# ====================================================================================
# SECURITY NOTES:
# ====================================================================================

# - Use Azure Key Vault for production secrets
# - Enable Azure AD Workload Identity for secure authentication
# - Regularly rotate secrets and API keys
# - Use separate Key Vaults for different environments
# - Enable Key Vault logging and monitoring
# - Restrict Key Vault access to specific AKS managed identity